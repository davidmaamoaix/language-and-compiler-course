entrypoints Program;

Prog. Program ::= [Decl];

separator Iden ",";
separator Exp ",";
terminator Stmt "";
terminator Decl "";

DVar. Decl ::= "decl" [Iden] ";";
DFun. Decl ::= Iden "(" [Iden] ")" "{" [Stmt] "}";

token Iden ((letter | '_') (letter | digit | '_')*);

EOr. Exp ::= Exp "||" Exp1;
EAnd. Exp1 ::= Exp1 "&&" Exp2;
EEqu. Exp2 ::= Exp2 "==" Exp3;
ELeq. Exp2 ::= Exp2 "<=" Exp3;
EGeq. Exp2 ::= Exp2 ">=" Exp3;
ELes. Exp2 ::= Exp2 "<" Exp3;
EGre. Exp2 ::= Exp2 ">" Exp3;
EAdd. Exp3 ::= Exp3 "+" Exp4;
ESub. Exp3 ::= Exp3 "-" Exp4;
EMul. Exp4 ::= Exp4 "*" Exp5;
EDiv. Exp4 ::= Exp4 "/" Exp5;
EInt. Exp5 ::= Integer;
EStr. Exp5 ::= String;
ETru. Exp5 ::= "TRUE";
EFal. Exp5 ::= "FALSE";
ENon. Exp5 ::= "NONE";
EIde. Exp5 ::= Iden;
ECal. Exp5 ::= Iden "(" [Exp] ")";

coercions Exp 6;

SDec. Stmt ::= "decl" [Iden] ";";
SAsn. Stmt ::= Iden "=" Exp ";";
SRet. Stmt ::= "return" Exp ";";
SBre. Stmt ::= "break" ";";
SCon. Stmt ::= "continue" ";";

SIfn. Stmt ::= "if" "(" Exp ")" "{" [Stmt] "}";
SIfe. Stmt ::= "if" "(" Exp ")" "{" [Stmt] "}" "else" "{" [Stmt] "}";
SWhi. Stmt ::= "while" "(" Exp ")" "{" [Stmt] "}";
SExp. Stmt ::= Exp ";";